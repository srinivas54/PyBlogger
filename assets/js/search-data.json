{
  
    
        "post0": {
            "title": "Data types in Python",
            "content": "Python is a dynamically typed language, meaning we don&#39;t have to declare the type of variable. We can assign a value to a variable in Python direcctly. Unlike other programming languages like C, C++, Java, etc.., the strict declaration of variables before assigning values to them is not present in Python. Input Keyword . To get user data we can use keyword input Myvalue = input(&#39;Please enter the value you wish to enter : &#39;) . Please enter the value you wish to enter : 10 . print(Myvalue) . 10 . type(Myvalue) . str . MyIntvalue = int(input(&#39;Please enter the value you wish to enter : &#39;)) . Please enter the value you wish to enter : 10 . print(MyIntvalue) . 10 . type(MyIntvalue) . int . Variables . Definining . A variable in Python is defined through assignment. There is no concept of declaring a variable outside of that assignment. . variable = 10 . variable . 10 . Numeric Types &#8212; int, float, complex . Integer : . In Python 3, there is effectively no limit to how long an integer value can be. Integer literals are created by any number without a decimal or complex component. a = 10 type(a) . int . --&gt; type() is a method that returns the type of given object --&gt; in the above example number 10 is assigned to a variable &#39;a&#39; . Python being the dynamically typed language understands the type of &#39;a&#39; as integer Float : . Float values are represented with decimal point. b = 10.56 type(b) . float . Complex : . Complex numbers have a real and imaginary part. Complex number are specified as x+yj , where x is the real component and y is the imaginary component. c = 5 + 7j type(c) . complex . To extract real and imaginatory we can use c.real and c.imag . The type of both real and imaginary parts are floating point numbers c.real . 5.0 . c.imag . 7.0 . type(c.imag) . float . Boolean: . Boolean data type is either True or False. When we compare two values the expression is evaluated and returns boolean value as True or False print(10 &gt; 9) . True . print(3 &lt; 1) . False . print(&#39;a&#39; in &#39;anaconda&#39;) . True . print(&#39;b&#39; in &#39;anaconda&#39;) . False . True and True . True . True or False . True . True and False . False . not True . False . b = True type(b) . bool . Strings . Strings are series of characters in Python.Strings can be created using single quotes(&#39;&#39;) or double quotes(&quot; &quot;). If the string exceeds single line, then triple quotes can also be used(&quot;&quot;&quot; &quot;&quot;&quot;) print(&#39;Hello world&#39;) . Hello world . print(&quot;Hello world&quot;) . Hello world . print(&quot;&quot;&quot; Hello world&quot;&quot;&quot;) . Hello world . print(&quot;Suraj father&#39;s name is Arjun&quot;) . Suraj father&#39;s name is Arjun . len(&#39;I am a good boy&#39;) . 15 . string1 = &#39;Hello world&#39; . print(string1) . Hello world . String Indexing . Strings are sequence of characters, so we can use index to call the sequence parts. In Python, indexing starts at 0. We use brackets [] after an object to call its index. string1[0] . &#39;H&#39; . string1[1] . &#39;e&#39; . string1[7] . &#39;o&#39; . String Slicing . We can use a : to perform slicing in Python string[starting position : ending position : step size] starting position -- starting index value of element ending position -- Upto but not including(Ex: Ending position as 3, implies the index upto index 3 not including index 3 ) step size -- can be +ve and -ve also. -ve to fetch elements in reverse order. string1[1:] . &#39;ello world&#39; . string1[-1] . &#39;d&#39; . string1[:7] . &#39;Hello w&#39; . string1[2:8] . &#39;llo wo&#39; . string1[::1] . &#39;Hello world&#39; . string1[::2] . &#39;Hlowrd&#39; . string1[::-1] . &#39;dlrow olleH&#39; . String properties . Immutability: . Strings are immutable, meaning once created we cannot alter the string. . string1 . &#39;Hello world&#39; . string1[5] = &#39;j&#39; . TypeError Traceback (most recent call last) &lt;ipython-input-2-916161808c44&gt; in &lt;module&gt; -&gt; 1 string1[5] = &#39;j&#39; TypeError: &#39;str&#39; object does not support item assignment . Concatination: . We can use + operator to concatinate strings in Python . &quot;Old string&quot; + &quot;New string&quot; . &#39;Old stringNew string&#39; . string2 = string1 + &#39; New string to concatinate&#39; . string2 . &#39;Hello world New string to concatinate&#39; . &#39;b&#39; * 10 . &#39;bbbbbbbbbb&#39; . Strong Typing . While Python allows you to be very flexible with your types, you must still be aware of what those types are. Certain operations will require certain types as arguments. . print(&#39;My age is &#39; + 26) . TypeError Traceback (most recent call last) &lt;ipython-input-12-0ea6597c2967&gt; in &lt;module&gt; -&gt; 1 print(&#39;My age is &#39; + 26) TypeError: can only concatenate str (not &#34;int&#34;) to str . print(&#39;My age is &#39; + str(26)) . My age is 26 . Before concatinating, we have to type cast the integer to string. We can make use of built-in methods to change the integer to string and proceed with concatination. Built-in methods: . Built-in methods makes our lives easier. These are the functions that we use in day to day basics. We can call built-in methods using dot(.) at the end of the object . string1.upper() . &#39;HELLO WORLD&#39; . string1.lower() . &#39;hello world&#39; . string1.title() . &#39;Hello World&#39; . string1.split() . [&#39;Hello&#39;, &#39;world&#39;] . string1.split(&#39;o&#39;) . [&#39;Hell&#39;, &#39; w&#39;, &#39;rld&#39;] . string1.partition(&#39;o&#39;) . (&#39;Hell&#39;, &#39;o&#39;, &#39; world&#39;) . .is methods: . .is methods returns True or False for the string . Following are the .is methods: isalnum - Return True if all characters in the string are alpha numeric, False otherwise isalpha - Return True if all characters in the string are Aplhabatic, False otherwise isascii - Return True if all characters in the string are ASCII, False otherwise isdecimal - Return True if the string is a decimal string, False otherwise. isdigit - Return True if the string is a digit string, False otherwise. isidentifier - Return True if the string is a valid Python identifier, False otherwise. islower - Return True if the string is a lowercase string, False otherwise. isnumeric - Return True if the string is a numeric string, False otherwise. isprintable - Return True if the string is printable, False otherwise. isspace - Return True if the string is a whitespace string, False otherwise. istitle - Return True if the string is a title-cased string, False otherwise. isupper - Return True if the string is an uppercase string, False otherwise. string1.isupper() . False . string1.islower() . False . string1.istitle() . False . string1.isspace() . False . Location and Counting . string1 . &#39;Hello world&#39; . string1.find(&#39;o&#39;) . 4 . string1.count(&#39;l&#39;) . 3 . Formatting . center() method allows you to place your string &#39;centered&#39; between a provided string with a certain length. . string1.center(20,&#39;*&#39;) . &#39;****Hello world*****&#39; . Print Formatting . Formatting using modulo(%) operator . Here are some basic argument specifiers you should know: %s - String (or any object with a string representation, like numbers) %d - Integers %f - Floating point numbers %.(number of digits)f - Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X - Integers in hex representation (lowercase/uppercase) name = &quot;Suraj&quot; age = 26 print(&quot;%s is %d years old.&quot; % (name, age)) . Suraj is 26 years old. . Formatting using .format method . print(&quot;{} is {} years old.&quot; .format(name,age)) . Suraj is 26 years old. . print(&quot;{0} is {1} years old.&quot; .format(name,age)) . Suraj is 26 years old. . print(&quot;Age is {1} and name is {0}.&quot; .format(name,age)) . Age is 26 and name is Suraj. . Formatting using f-string (formatted string) . print(f&quot;{name} is {age} years old.&quot;) . Suraj is 26 years old. . print(f&quot;Age is {age} and name is {name}.&quot;) . Age is 26 and name is Suraj. .",
            "url": "https://srinivas54.github.io/PyBlogger/2021/01/19/.-Data-types-in-Python(int,float,boolean,string).html",
            "relUrl": "/2021/01/19/.-Data-types-in-Python(int,float,boolean,string).html",
            "date": " • Jan 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://srinivas54.github.io/PyBlogger/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://srinivas54.github.io/PyBlogger/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://srinivas54.github.io/PyBlogger/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://srinivas54.github.io/PyBlogger/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}